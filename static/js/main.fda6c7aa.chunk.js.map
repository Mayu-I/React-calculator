{"version":3,"sources":["component/Display.js","component/Button.js","component/ButtonPanel.js","logic/operate.js","logic/calculate.js","logic/isNumber.js","component/App.js","serviceWorker.js","index.js"],"names":["Display","className","this","props","value","React","Component","Button","handleClick","clickHandler","name","orange","wide","join","trim","onClick","ButtonPanel","buttonName","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","Error","calculate","obj","total","next","test","result","includes","parseFloat","App","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fda6c7aa.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Display.css\";\n\nexport default class Display extends React.Component {\n    static propTypes = {\n        value: PropTypes.string,\n    };\n\n    render() {\n        return (\n            <div className=\"component-display\">\n                <div>{this.props.value}</div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\n\nexport default class Button extends React.Component {\n    static propTypes = {\n        name: PropTypes.string,\n        orange: PropTypes.bool,\n        wide: PropTypes.bool,\n        clickHandler: PropTypes.func,\n    };\n\n    handleClick = () => {\n        this.props.clickHandler(this.props.name);\n    };\n\n    render() {\n        const className = [\n            \"component-button\",\n            this.props.orange ? \"orange\" : \"\",\n            this.props.wide ? \"wide\" : \"\",\n        ];\n\n        return (\n            <div className={className.join(\" \").trim()}>\n                <button onClick={this.handleClick}>{this.props.name}</button>\n            </div>\n        );\n    }\n}","import Button from \"./Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ButtonPanel.css\";\n\nexport default class ButtonPanel extends React.Component {\n    static propTypes = {\n        clickHandler: PropTypes.func,\n    };\n\n    handleClick = buttonName => {\n        this.props.clickHandler(buttonName);\n    };\n\n    render() {\n        return (\n            <div className=\"component-button-panel\">\n                <div>\n                    <Button name=\"AC\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"+/-\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"%\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"รท\" clickHandler={this.handleClick} orange></Button>\n                </div>\n                <div>\n                    <Button name=\"7\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"8\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"9\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"x\" clickHandler={this.handleClick} orange></Button>\n                </div>\n                <div>\n                    <Button name=\"4\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"5\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"6\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"-\" clickHandler={this.handleClick} orange></Button>\n                </div>\n                <div>\n                    <Button name=\"1\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"2\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"3\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"+\" clickHandler={this.handleClick} orange></Button>\n                </div>\n                <div>\n                    <Button name=\"0\" clickHandler={this.handleClick}></Button>\n                    <Button name=\".\" clickHandler={this.handleClick}></Button>\n                    <Button name=\"=\" clickHandler={this.handleClick}></Button>\n                </div>\n            </div>\n        );\n    }\n}","import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n    const one = Big(numberOne || \"0\");\n    const two = Big(numberTwo || (operation === \"+\" || operation === 'x' ? \"1\" : \"0\"));\n    if (operation === \"+\") {\n        return one.plus(two).toString();\n    }\n    if (operation === \"-\") {\n        return one.minus(two).toString();\n    }\n    if (operation === \"x\") {\n        return one.times(two).toString();\n    }\n    if (operation === \"รท\") {\n        if (two === \"0\") {\n            alert(\"Divide by 0 error\");\n            return \"0\";\n        } else {\n            return one.div(two).toString();\n        }\n    }\n    throw Error(`Unknown operation '${operation}'`);\n}","import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\nexport default function calculate(obj, buttonName) {\n    if (buttonName === \"AC\") {\n        return {\n            total: null,\n            next: null,\n            operation: null,\n        };\n    }\n\n    if (isNumber(buttonName)) {\n        if (buttonName === \"0\" && obj.next === \"0\") {\n            return {};\n        }\n\n        if (obj.operation) {\n            if (obj.next) {\n                return { next: obj.next + buttonName };\n            }\n            return { next: buttonName };\n        }\n\n        if (obj.next) {\n            const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n            return {\n                next,\n                total: null,\n            };\n        }\n        return {\n            next: buttonName,\n            total: null,\n        };\n    }\n\n    if (buttonName === \"%\") {\n        if (obj.operation && obj.next) {\n            const result = operate(obj.total, obj.next, obj.operation);\n            return {\n                total: Big(result)\n                    .div(Big(\"100\"))\n                    .toString(),\n            };\n        }\n        if (obj.next) {\n            return {\n                next: Big(obj.next)\n                    .div(Big(\"100\"))\n                    .toString(),\n            };\n        }\n        return {};\n    }\n\n    if (buttonName === \".\") {\n        if (obj.next) {\n            if (obj.next.includes(\".\")) {\n                return {};\n            }\n            return { next: obj.next + \".\" };\n        }\n        return { next: \"0.\" };\n    }\n\n    if (buttonName === \"=\") {\n        if (obj.next && obj.operation) {\n            return {\n                total: operate(obj.total, obj.next, obj.operation),\n                next: null,\n                operation: null,\n            };\n        } else {\n            return {};\n        }\n    }\n\n    if (buttonName === \"+/-\") {\n        if (obj.next) {\n            return { next: (-1 * parseFloat(obj.next)).toString() };\n        }\n        if (obj.total) {\n            return { total: (-1 * parseFloat(obj.total)).toString() };\n        }\n        return {};\n    }\n\n    if (obj.operation) {\n        return {\n            total: operate(obj.total, obj.next, obj.operation),\n            next: null,\n            operation: buttonName,\n        };\n    }\n\n    if (!obj.next) {\n        return { operation: buttonName };\n    }\n\n    return {\n        total: obj.next,\n        next: null,\n        operation: buttonName,\n    };\n\n}","export default function isNumber(item) {\n    return /[0-9]+/.test(item);\n}","import React from 'react';\nimport Display from \"./Display\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport calculate from \"../logic/calculate\";\nimport './App.css';\n\nexport default class App extends React.Component {\n  state = {\n    total: null,\n    next: null,\n    operation: null,\n  };\n\n  handleClick = buttonName => {\n    this.setState(calculate(this.state, buttonName));\n  };\n\n  render() {\n    return (\n      <div className=\"component-app\">\n        <Display value={this.state.next || this.state.total || \"0\"}></Display>\n        <ButtonPanel clickHandler={this.handleClick}></ButtonPanel>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}